
012_2_HAL_CAN_BUS_GET_ADC_DATA_AND_SHOW_WITH_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb8  08002fb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc0  08002fc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000938b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001759  00000000  00000000  000293c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000798  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fadd  00000000  00000000  0002baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a410  00000000  00000000  0004b5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c10ba  00000000  00000000  000559dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116a97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002190  00000000  00000000  00116ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f6c 	.word	0x08002f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f6c 	.word	0x08002f6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f023 030f 	bic.w	r3, r3, #15
 80004dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 030c 	orr.w	r3, r3, #12
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	f043 030c 	orr.w	r3, r3, #12
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	b2db      	uxtb	r3, r3
 800050a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2304      	movs	r3, #4
 8000516:	214e      	movs	r1, #78	; 0x4e
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <lcd_send_cmd+0x5c>)
 800051a:	f001 fd6f 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000050 	.word	0x20000050

0800052c <lcd_send_data>:

void lcd_send_data (char data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f023 030f 	bic.w	r3, r3, #15
 800053c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f043 030d 	orr.w	r3, r3, #13
 800054a:	b2db      	uxtb	r3, r3
 800054c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	f043 0309 	orr.w	r3, r3, #9
 8000554:	b2db      	uxtb	r3, r3
 8000556:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	f043 030d 	orr.w	r3, r3, #13
 800055e:	b2db      	uxtb	r3, r3
 8000560:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f043 0309 	orr.w	r3, r3, #9
 8000568:	b2db      	uxtb	r3, r3
 800056a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2304      	movs	r3, #4
 8000576:	214e      	movs	r1, #78	; 0x4e
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <lcd_send_data+0x5c>)
 800057a:	f001 fd3f 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000050 	.word	0x20000050

0800058c <lcd_init>:

void lcd_init (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff ff9b 	bl	80004cc <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f7ff ff98 	bl	80004cc <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800059c:	200c      	movs	r0, #12
 800059e:	f7ff ff95 	bl	80004cc <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80005a2:	2080      	movs	r0, #128	; 0x80
 80005a4:	f7ff ff92 	bl	80004cc <lcd_send_cmd>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005b4:	e006      	b.n	80005c4 <lcd_send_string+0x18>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffb4 	bl	800052c <lcd_send_data>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f4      	bne.n	80005b6 <lcd_send_string+0xa>
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb18 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f848 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f914 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e8:	f000 f8e4 	bl	80007b4 <MX_I2C1_Init>
  MX_CAN1_Init();
 80005ec:	f000 f8ac 	bl	8000748 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  //Set Transmit parameters

	pHeader.DLC = 1;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x8c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <main+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x0156;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0x8c>)
 8000604:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8000608:	601a      	str	r2, [r3, #0]

	// Set Filter Parameters

	sFilterConfig.FilterActivation = ENABLE;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <main+0x90>)
 800060c:	2201      	movs	r2, #1
 800060e:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <main+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <main+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0000;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <main+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <main+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <main+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <main+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000640:	4909      	ldr	r1, [pc, #36]	; (8000668 <main+0x90>)
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0x94>)
 8000644:	f000 fc52 	bl	8000eec <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x94>)
 800064a:	f000 fd2f 	bl	80010ac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064e:	2102      	movs	r1, #2
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <main+0x94>)
 8000652:	f000 fe81 	bl	8001358 <HAL_CAN_ActivateNotification>

  lcd_init();
 8000656:	f7ff ff99 	bl	800058c <lcd_init>

  lcd_send_string("CAN BUS ADC");
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <main+0x98>)
 800065c:	f7ff ffa6 	bl	80005ac <lcd_send_string>
  //HAL_Delay(2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x88>
 8000662:	bf00      	nop
 8000664:	200000c0 	.word	0x200000c0
 8000668:	200000d8 	.word	0x200000d8
 800066c:	20000028 	.word	0x20000028
 8000670:	08002f84 	.word	0x08002f84

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fc6a 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 ff86 	bl	800260c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000706:	f000 f8b9 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f9e7 	bl	8002afc <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000734:	f000 f8a2 	bl	800087c <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	; 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_CAN1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_CAN1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_CAN1_Init+0x64>)
 8000754:	2215      	movs	r2, #21
 8000756:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_CAN1_Init+0x64>)
 8000766:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800076a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_CAN1_Init+0x64>)
 800076e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000772:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_CAN1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_CAN1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_CAN1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_CAN1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_CAN1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_CAN1_Init+0x64>)
 800079a:	f000 faab 	bl	8000cf4 <HAL_CAN_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f86a 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40006400 	.word	0x40006400

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f001 fabf 	bl	8001d74 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f83e 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000050 	.word	0x20000050
 8000808:	40005400 	.word	0x40005400
 800080c:	000186a0 	.word	0x000186a0

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_GPIO_Init+0x68>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_GPIO_Init+0x68>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_GPIO_Init+0x68>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_GPIO_Init+0x68>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_GPIO_Init+0x68>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_GPIO_Init+0x68>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_GPIO_Init+0x68>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_GPIO_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c6:	2007      	movs	r0, #7
 80008c8:	f001 f876 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_CAN_MspInit+0x94>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d134      	bne.n	8000964 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_CAN_MspInit+0x98>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_CAN_MspInit+0x98>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_CAN_MspInit+0x98>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_CAN_MspInit+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_CAN_MspInit+0x98>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_CAN_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000944:	2309      	movs	r3, #9
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_CAN_MspInit+0x9c>)
 8000950:	f001 f874 	bl	8001a3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2014      	movs	r0, #20
 800095a:	f001 f838 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800095e:	2014      	movs	r0, #20
 8000960:	f001 f851 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40006400 	.word	0x40006400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b6:	23c0      	movs	r3, #192	; 0xc0
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d2:	f001 f833 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f92e 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  lcd_send_cmd(0x01); //lcd clear
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fd33 	bl	80004cc <lcd_send_cmd>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a66:	4846      	ldr	r0, [pc, #280]	; (8000b80 <CAN1_RX0_IRQHandler+0x124>)
 8000a68:	f000 fc9c 	bl	80013a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rAdc_value);
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <CAN1_RX0_IRQHandler+0x12c>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4843      	ldr	r0, [pc, #268]	; (8000b80 <CAN1_RX0_IRQHandler+0x124>)
 8000a74:	f000 fb5e 	bl	8001134 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
  lcd_send_cmd(0x80); //lcd 0x0;
 8000a78:	2080      	movs	r0, #128	; 0x80
 8000a7a:	f7ff fd27 	bl	80004cc <lcd_send_cmd>
  lcd_send_string("  RADC VALUE:  ");
 8000a7e:	4843      	ldr	r0, [pc, #268]	; (8000b8c <CAN1_RX0_IRQHandler+0x130>)
 8000a80:	f7ff fd94 	bl	80005ac <lcd_send_string>

  if(rAdc_value < 9)
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d814      	bhi.n	8000ab6 <CAN1_RX0_IRQHandler+0x5a>
  {
	  lcd_send_cmd(0xc0); // /n
 8000a8c:	20c0      	movs	r0, #192	; 0xc0
 8000a8e:	f7ff fd1d 	bl	80004cc <lcd_send_cmd>
	  lcd_send_data(rAdc_value % 10 + 48);
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000a98:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	3330      	adds	r3, #48	; 0x30
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd3c 	bl	800052c <lcd_send_data>
	  lcd_send_data((rAdc_value / 10) % 10 + 48);
	  lcd_send_data(rAdc_value % 10 + 48);
  }


}
 8000ab4:	e062      	b.n	8000b7c <CAN1_RX0_IRQHandler+0x120>
  else if(rAdc_value > 9 && rAdc_value < 100)
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	d924      	bls.n	8000b08 <CAN1_RX0_IRQHandler+0xac>
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b63      	cmp	r3, #99	; 0x63
 8000ac4:	d820      	bhi.n	8000b08 <CAN1_RX0_IRQHandler+0xac>
	  lcd_send_cmd(0xc0); // /n
 8000ac6:	20c0      	movs	r0, #192	; 0xc0
 8000ac8:	f7ff fd00 	bl	80004cc <lcd_send_cmd>
	  lcd_send_data(rAdc_value / 10 + 48);
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	3330      	adds	r3, #48	; 0x30
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd24 	bl	800052c <lcd_send_data>
	  lcd_send_data(rAdc_value % 10 + 48);
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000aea:	fba3 1302 	umull	r1, r3, r3, r2
 8000aee:	08d9      	lsrs	r1, r3, #3
 8000af0:	460b      	mov	r3, r1
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	3330      	adds	r3, #48	; 0x30
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fd13 	bl	800052c <lcd_send_data>
}
 8000b06:	e039      	b.n	8000b7c <CAN1_RX0_IRQHandler+0x120>
  else if (rAdc_value >99 && rAdc_value < 256)
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b63      	cmp	r3, #99	; 0x63
 8000b0e:	d935      	bls.n	8000b7c <CAN1_RX0_IRQHandler+0x120>
	  lcd_send_cmd(0xc0); // /n
 8000b10:	20c0      	movs	r0, #192	; 0xc0
 8000b12:	f7ff fcdb 	bl	80004cc <lcd_send_cmd>
	  lcd_send_data(rAdc_value / 100 + 48);
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <CAN1_RX0_IRQHandler+0x138>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	3330      	adds	r3, #48	; 0x30
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fcff 	bl	800052c <lcd_send_data>
	  lcd_send_data((rAdc_value / 10) % 10 + 48);
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b42:	08d9      	lsrs	r1, r3, #3
 8000b44:	460b      	mov	r3, r1
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3330      	adds	r3, #48	; 0x30
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fce9 	bl	800052c <lcd_send_data>
	  lcd_send_data(rAdc_value % 10 + 48);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <CAN1_RX0_IRQHandler+0x128>)
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <CAN1_RX0_IRQHandler+0x134>)
 8000b60:	fba3 1302 	umull	r1, r3, r3, r2
 8000b64:	08d9      	lsrs	r1, r3, #3
 8000b66:	460b      	mov	r3, r1
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	3330      	adds	r3, #48	; 0x30
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fcd8 	bl	800052c <lcd_send_data>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000028 	.word	0x20000028
 8000b84:	20000100 	.word	0x20000100
 8000b88:	200000a4 	.word	0x200000a4
 8000b8c:	08002f90 	.word	0x08002f90
 8000b90:	cccccccd 	.word	0xcccccccd
 8000b94:	51eb851f 	.word	0x51eb851f

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 f993 	bl	8002f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcf3 	bl	80005d8 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08002fc8 	.word	0x08002fc8
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000108 	.word	0x20000108

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 febd 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe20 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fed5 	bl	8001a22 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 fe9d 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000104 	.word	0x20000104

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000104 	.word	0x20000104

08000cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0ed      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fde0 	bl	80008d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d28:	f7ff ffd8 	bl	8000cdc <HAL_GetTick>
 8000d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d2e:	e012      	b.n	8000d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d30:	f7ff ffd4 	bl	8000cdc <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d90b      	bls.n	8000d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0c5      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0e5      	beq.n	8000d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0202 	bic.w	r2, r2, #2
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ffb2 	bl	8000cdc <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ffae 	bl	8000cdc <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e09f      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e5      	bne.n	8000d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7e1b      	ldrb	r3, [r3, #24]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7e5b      	ldrb	r3, [r3, #25]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e9b      	ldrb	r3, [r3, #26]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d108      	bne.n	8000e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e007      	b.n	8000e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0220 	bic.w	r2, r2, #32
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7edb      	ldrb	r3, [r3, #27]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0210 	bic.w	r2, r2, #16
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0210 	orr.w	r2, r2, #16
 8000e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7f1b      	ldrb	r3, [r3, #28]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0208 	orr.w	r2, r2, #8
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0208 	bic.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7f5b      	ldrb	r3, [r3, #29]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d108      	bne.n	8000e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0204 	orr.w	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e007      	b.n	8000eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0204 	bic.w	r2, r2, #4
 8000eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	ea42 0103 	orr.w	r1, r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f04:	7cfb      	ldrb	r3, [r7, #19]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_ConfigFilter+0x26>
 8000f0a:	7cfb      	ldrb	r3, [r7, #19]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	f040 80be 	bne.w	800108e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f12:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f14:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2201      	movs	r2, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d123      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3248      	adds	r2, #72	; 0x48
 8000f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	3348      	adds	r3, #72	; 0x48
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d122      	bne.n	800100a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3248      	adds	r2, #72	; 0x48
 8000fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	3348      	adds	r3, #72	; 0x48
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001024:	e007      	b.n	8001036 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	431a      	orrs	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001050:	e007      	b.n	8001062 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001080:	f023 0201 	bic.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e006      	b.n	800109c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40006400 	.word	0x40006400

080010ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d12e      	bne.n	800111e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fe00 	bl	8000cdc <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010de:	e012      	b.n	8001106 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e0:	f7ff fdfc 	bl	8000cdc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90b      	bls.n	8001106 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2205      	movs	r2, #5
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e012      	b.n	800112c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e5      	bne.n	80010e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e006      	b.n	800112c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
  }
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_GetRxMessage+0x24>
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f040 80f3 	bne.w	800133e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d116      	bne.n	800119a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0e7      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d107      	bne.n	800119a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0d8      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	331b      	adds	r3, #27
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0204 	and.w	r2, r3, #4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10c      	bne.n	80011d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e00b      	b.n	80011ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	331b      	adds	r3, #27
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	331b      	adds	r3, #27
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0202 	and.w	r2, r3, #2
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	331b      	adds	r3, #27
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 020f 	and.w	r2, r3, #15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	331b      	adds	r3, #27
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0a1a      	lsrs	r2, r3, #8
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3302      	adds	r3, #2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0e1a      	lsrs	r2, r3, #24
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3303      	adds	r3, #3
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0a1a      	lsrs	r2, r3, #8
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3305      	adds	r3, #5
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0c1a      	lsrs	r2, r3, #16
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3306      	adds	r3, #6
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0e1a      	lsrs	r2, r3, #24
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3307      	adds	r3, #7
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	e007      	b.n	800133a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e006      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001368:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d002      	beq.n	8001376 <HAL_CAN_ActivateNotification+0x1e>
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d109      	bne.n	800138a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6959      	ldr	r1, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e006      	b.n	8001398 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d07c      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f983 	bl	8001712 <HAL_CAN_TxMailbox0CompleteCallback>
 800140c:	e016      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	e00c      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e002      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f989 	bl	800174e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d024      	beq.n	8001490 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f963 	bl	8001726 <HAL_CAN_TxMailbox1CompleteCallback>
 8001460:	e016      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e00c      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e002      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f969 	bl	8001762 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f943 	bl	800173a <HAL_CAN_TxMailbox2CompleteCallback>
 80014b4:	e016      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	e00c      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e002      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f949 	bl	8001776 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2210      	movs	r2, #16
 8001506:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2208      	movs	r2, #8
 8001522:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f93a 	bl	800179e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f921 	bl	800178a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2210      	movs	r2, #16
 800156a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f91c 	bl	80017c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f903 	bl	80017b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2210      	movs	r2, #16
 80015c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f906 	bl	80017da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00b      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2208      	movs	r2, #8
 80015e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8ff 	bl	80017ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d07b      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d072      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	2b00      	cmp	r3, #0
 8001660:	d043      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03e      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001672:	2b60      	cmp	r3, #96	; 0x60
 8001674:	d02b      	beq.n	80016ce <HAL_CAN_IRQHandler+0x32a>
 8001676:	2b60      	cmp	r3, #96	; 0x60
 8001678:	d82e      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 800167a:	2b50      	cmp	r3, #80	; 0x50
 800167c:	d022      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x320>
 800167e:	2b50      	cmp	r3, #80	; 0x50
 8001680:	d82a      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d019      	beq.n	80016ba <HAL_CAN_IRQHandler+0x316>
 8001686:	2b40      	cmp	r3, #64	; 0x40
 8001688:	d826      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 800168a:	2b30      	cmp	r3, #48	; 0x30
 800168c:	d010      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x30c>
 800168e:	2b30      	cmp	r3, #48	; 0x30
 8001690:	d822      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 8001692:	2b10      	cmp	r3, #16
 8001694:	d002      	beq.n	800169c <HAL_CAN_IRQHandler+0x2f8>
 8001696:	2b20      	cmp	r3, #32
 8001698:	d005      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800169a:	e01d      	b.n	80016d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a4:	e019      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ae:	e014      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b8:	e00f      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c2:	e00a      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016cc:	e005      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016d6:	e000      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            break;
 80016d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f87c 	bl	8001802 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e16b      	b.n	8001d30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 815a 	bne.w	8001d2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80b4 	beq.w	8001d2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02b      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x318>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_GPIO_Init+0x31c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <HAL_GPIO_Init+0x320>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x20a>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c46:	2308      	movs	r3, #8
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae90 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fdec 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f001 f888 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7fe fe64 	bl	8000cdc <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80e0 	bne.w	80021e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4970      	ldr	r1, [pc, #448]	; (80021f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f964 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e0d3      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Transmit+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	; 0x21
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f89c 	bl	80021f8 <I2C_MasterRequestWrite>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08d      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e0:	e066      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f9de 	bl	80024a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x188>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f9ce 	bl	800252a <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d194      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d006      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d003      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00b      	b.n	800224c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b12      	cmp	r3, #18
 800223a:	d107      	bne.n	800224c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f84f 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d103      	bne.n	800227c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e035      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002288:	d108      	bne.n	800229c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228a:	897b      	ldrh	r3, [r7, #10]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	e01b      	b.n	80022d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800229c:	897b      	ldrh	r3, [r7, #10]
 800229e:	11db      	asrs	r3, r3, #7
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 0306 	and.w	r3, r3, #6
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f063 030f 	orn	r3, r3, #15
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <I2C_MasterRequestWrite+0xfc>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f875 	bl	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e010      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <I2C_MasterRequestWrite+0x100>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f865 	bl	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00010008 	.word	0x00010008
 80022f8:	00010002 	.word	0x00010002

080022fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230c:	e025      	b.n	800235a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d021      	beq.n	800235a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7fe fce1 	bl	8000cdc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d116      	bne.n	800235a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e023      	b.n	80023a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10d      	bne.n	8002380 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4013      	ands	r3, r2
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	e00c      	b.n	800239a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4013      	ands	r3, r2
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	429a      	cmp	r2, r3
 800239e:	d0b6      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b8:	e051      	b.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	d123      	bne.n	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e046      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d021      	beq.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7fe fc5f 	bl	8000cdc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e020      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e00b      	b.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d18d      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b4:	e02d      	b.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f878 	bl	80025ac <I2C_IsAcknowledgeFailed>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e02d      	b.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d021      	beq.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ce:	f7fe fc05 	bl	8000cdc <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e007      	b.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d1ca      	bne.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002536:	e02d      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f837 	bl	80025ac <I2C_IsAcknowledgeFailed>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e02d      	b.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d021      	beq.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7fe fbc4 	bl	8000cdc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e007      	b.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d1ca      	bne.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d11b      	bne.n	80025fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e267      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b7e      	ldr	r3, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e242      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6c      	ldr	r2, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b69      	ldr	r3, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fb0a 	bl	8000cdc <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fb06 	bl	8000cdc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e207      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe faf6 	bl	8000cdc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe faf2 	bl	8000cdc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f3      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c7      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe faab 	bl	8000cdc <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe faa7 	bl	8000cdc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a8      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fa8a 	bl	8000cdc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fa86 	bl	8000cdc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e187      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fa6a 	bl	8000cdc <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fa66 	bl	8000cdc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e167      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fa53 	bl	8000cdc <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fa4f 	bl	8000cdc <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e150      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fa0f 	bl	8000cdc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe fa0b 	bl	8000cdc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x30c>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe f9d0 	bl	8000cdc <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe f9cc 	bl	8000cdc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0cb      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe f9ba 	bl	8000cdc <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe f9b6 	bl	8000cdc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0b5      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a1 	beq.w	8002aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d05c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d141      	bne.n	8002a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe f98a 	bl	8000cdc <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe f986 	bl	8000cdc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e087      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f95f 	bl	8000cdc <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe f95b 	bl	8000cdc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e05c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x416>
 8002a40:	e054      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe f948 	bl	8000cdc <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe f944 	bl	8000cdc <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e045      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e038      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f876 	bl	8000cdc <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe f872 	bl	8000cdc <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd ffd6 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08002fa0 	.word	0x08002fa0
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b094      	sub	sp, #80	; 0x50
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80e1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0db      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
 8002d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6139      	str	r1, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d80:	4659      	mov	r1, fp
 8002d82:	eb63 0901 	sbc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	462b      	mov	r3, r5
 8002da8:	eb49 0303 	adc.w	r3, r9, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	024b      	lsls	r3, r1, #9
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	024a      	lsls	r2, r1, #9
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd8:	f7fd f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e38:	ebb2 040a 	subs.w	r4, r2, sl
 8002e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	61fa      	str	r2, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	f7fd f99c 	bl	80001c8 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08002fb0 	.word	0x08002fb0

08002f14 <__libc_init_array>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	4d0d      	ldr	r5, [pc, #52]	; (8002f4c <__libc_init_array+0x38>)
 8002f18:	4c0d      	ldr	r4, [pc, #52]	; (8002f50 <__libc_init_array+0x3c>)
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	10a4      	asrs	r4, r4, #2
 8002f1e:	2600      	movs	r6, #0
 8002f20:	42a6      	cmp	r6, r4
 8002f22:	d109      	bne.n	8002f38 <__libc_init_array+0x24>
 8002f24:	4d0b      	ldr	r5, [pc, #44]	; (8002f54 <__libc_init_array+0x40>)
 8002f26:	4c0c      	ldr	r4, [pc, #48]	; (8002f58 <__libc_init_array+0x44>)
 8002f28:	f000 f820 	bl	8002f6c <_init>
 8002f2c:	1b64      	subs	r4, r4, r5
 8002f2e:	10a4      	asrs	r4, r4, #2
 8002f30:	2600      	movs	r6, #0
 8002f32:	42a6      	cmp	r6, r4
 8002f34:	d105      	bne.n	8002f42 <__libc_init_array+0x2e>
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3c:	4798      	blx	r3
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7ee      	b.n	8002f20 <__libc_init_array+0xc>
 8002f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f46:	4798      	blx	r3
 8002f48:	3601      	adds	r6, #1
 8002f4a:	e7f2      	b.n	8002f32 <__libc_init_array+0x1e>
 8002f4c:	08002fc0 	.word	0x08002fc0
 8002f50:	08002fc0 	.word	0x08002fc0
 8002f54:	08002fc0 	.word	0x08002fc0
 8002f58:	08002fc4 	.word	0x08002fc4

08002f5c <memset>:
 8002f5c:	4402      	add	r2, r0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
